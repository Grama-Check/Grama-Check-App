// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: gramacheck.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    nic,
    address,
    name,
    email,
    idcheck,
    addresscheck,
    policecheck,
    failed

) 
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8 )
RETURNING nic, name, address, email, idcheck, addresscheck, policecheck, failed
`

type CreateUserParams struct {
	Nic          string `json:"nic"`
	Address      string `json:"address"`
	Name         string `json:"name"`
	Email        string `json:"email"`
	Idcheck      bool   `json:"idcheck"`
	Addresscheck bool   `json:"addresscheck"`
	Policecheck  bool   `json:"policecheck"`
	Failed       bool   `json:"failed"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Nic,
		arg.Address,
		arg.Name,
		arg.Email,
		arg.Idcheck,
		arg.Addresscheck,
		arg.Policecheck,
		arg.Failed,
	)
	var i User
	err := row.Scan(
		&i.Nic,
		&i.Name,
		&i.Address,
		&i.Email,
		&i.Idcheck,
		&i.Addresscheck,
		&i.Policecheck,
		&i.Failed,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT nic, name, address, email, idcheck, addresscheck, policecheck, failed FROM users
WHERE nic = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, nic string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, nic)
	var i User
	err := row.Scan(
		&i.Nic,
		&i.Name,
		&i.Address,
		&i.Email,
		&i.Idcheck,
		&i.Addresscheck,
		&i.Policecheck,
		&i.Failed,
	)
	return i, err
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE users SET addresscheck = true
WHERE nic = $1
`

func (q *Queries) UpdateAddress(ctx context.Context, nic string) error {
	_, err := q.db.ExecContext(ctx, updateAddress, nic)
	return err
}

const updateFailed = `-- name: UpdateFailed :exec
UPDATE users SET failed = true
WHERE nic = $1
`

func (q *Queries) UpdateFailed(ctx context.Context, nic string) error {
	_, err := q.db.ExecContext(ctx, updateFailed, nic)
	return err
}

const updateID = `-- name: UpdateID :exec
UPDATE users SET idcheck = true
WHERE nic = $1
`

func (q *Queries) UpdateID(ctx context.Context, nic string) error {
	_, err := q.db.ExecContext(ctx, updateID, nic)
	return err
}

const updatePolice = `-- name: UpdatePolice :exec
UPDATE users SET policecheck = true
WHERE nic = $1
`

func (q *Queries) UpdatePolice(ctx context.Context, nic string) error {
	_, err := q.db.ExecContext(ctx, updatePolice, nic)
	return err
}
